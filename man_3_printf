.TH _printf 3 "17 Mar 2020" "version 1.0"
.SH NAME
_printf - formatted output conversion
.SH SYNOPSIS
#include "holberton.h"
.SH DESCRIPTION
The _printf() function produces output according to a \fIformat\fP as described below.
The function _printf writes output to \fIstdout\fP (the standard output): It writes the output under the control of a \fIformat\fP string that specifies how subsequent arguments (or arguments accessed via the variable-length argument facilities of \fBstdarg\fP(3)) are converted for output.

\fBReturn value\fP

If successful return, it returns the number of characters printed (excluding the null byte used to end output to strings).

If an output error is found, a negative value is returned.

\fBFormat of the format string\fP

The format string is a character string, beginning and ending in its initial shift state, if any. The format string is composed of zero or more directives: ordinary characters (not %), which are copied unchanged to the output stream; and conversion specifications, each of which results in fetching zero or more subsequent arguments.

Each conversion specification is introduced by the character \fI%\fP, and ends with a \fIconversion specifier\fP. In between there may be (in  this  order) zero or more \fIflags\fP, an optional minimum \fIfield width\fP, an optional \fIprecision\fP and an optional \fIlength modifier\fP.
.PP

The arguments must correspond properly (after type promotion) with the conversion specifier. By default, the arguments are
used in the order given, where each '*' and each conversion specifier asks for the next argument (and it is an error if
insufficiently many arguments are given). One can also specify explicitly which argument is taken, at each place
where an argument is required, by writing "%m$" instead of '%' and "*m$" instead of '*', where the decimal integer
\fIm\fP denotes the position in the argument list of the desired argument, indexed starting from 1.  Thus,
.PP