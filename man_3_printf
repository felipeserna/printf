.TH _printf 3 "17 Mar 2020" "version 1.0"
.SH NAME
_printf - formatted output conversion
.SH SYNOPSIS
#include "holberton.h"
.SH DESCRIPTION
The _printf() function produces output according to a \fIformat\fP as described below.
The function _printf writes output to \fIstdout\fP (the standard output): It writes the output under the control of a \fIformat\fP string that specifies how subsequent arguments (or arguments accessed via the variable-length argument facilities of \fBstdarg\fP(3)) are converted for output.

\fBReturn value\fP

If successful return, it returns the number of characters printed (excluding the null byte used to end output to strings).

If an output error is found, a negative value is returned.

\fBThe conversion specifier\fP
.RE

A character that specifies the type of conversion to be applied.  The conversion specifiers and their meanings are:
.PP
d, i   The int argument is converted to signed decimal notation.  The precision, if any, gives the minimum number of  digits  that  must  appear;  if  the  converted value requires fewer digits, it is padded on the left with zeros.  The default precision is 1.  When 0 is printed with an explicit precision 0, the output is empty.
.PP
c      If  no  l  modifier  is  present, the int argument is converted to an unsigned char, and the resulting character is written.  If an l modifier is present, the wint_t (wide character) argument is converted to a multibyte sequence by a  call to the wcrtomb(3) function, with a conversion state starting in the initial state, and the resulting multibyte string is written.
.PP
s      If no l modifier is present: The const char * argument is expected to be a pointer to an array  of  character  type (pointer  to  a  string).   Characters from the array are written up to (but not including) a terminating null byte ('\0'); if a precision is specified, no more than the number specified are written.  If a precision  is  given,  no null  byte  need be present; if the precision is not specified, or is greater than the size of the array, the array must contain a terminating null byte.
.PP
If an l modifier is present: The const wchar_t * argument is expected to be a pointer to an array of  wide  characters.  Wide characters from the array are converted to multibyte characters (each by a call to the wcrtomb(3) function, with a conversion state starting in the initial state before the first wide character), up to and including a terminating null wide character.  The resulting multibyte characters are written up to (but not including) the terminating null byte.  If a precision is specified, no more bytes than the number specified are written, but no  partial  multibyte  characters  are  written.  Note that the precision determines the number of bytes written, not the number of wide characters or screen positions.  The array must contain a terminating null wide character, unless  a precision  is  given  and it is so small that the number of bytes written exceeds it before the end of the array is reached.
.PP

%      A '%' is written.  No argument is converted.  The complete conversion specification is '%%'.
.SH AUTHORS
By Luis Alejandro Marin & Felipe Serna
.SH BUGS
No bugs reported. Please do not hesitate to report bugs to

felipe.serna@holbertonschool.com

luis-alejandro.marin-cuellar@holbertonschool.com
.SH SEE ALSO
.I printf(3)