.TH _printf 3 "17 Mar 2020" "version 1.0"
.SH NAME
_printf - formatted output conversion
.SH SYNOPSIS
#include "holberton.h"
.SH DESCRIPTION
The _printf() function produces output according to a \fIformat\fP as described below.
The function _printf writes output to \fIstdout\fP (the standard output): It writes the output under the control of a \fIformat\fP string that specifies how subsequent arguments (or arguments accessed via the variable-length argument facilities of \fBstdarg\fP(3)) are converted for output.

\fBReturn value\fP

If successful return, it returns the number of characters printed (excluding the null byte used to end output to strings).

If an output error is found, a negative value is returned.

\fBFormat of the format string\fP

The format string is a character string, beginning and ending in its initial shift state, if any. The format string is composed of zero or more directives: ordinary characters (not %), which are copied unchanged to the output stream; and conversion specifications, each of which results in fetching zero or more subsequent arguments.

Each conversion specification is introduced by the character \fI%\fP, and ends with a \fIconversion specifier\fP. In between there may be (in  this  order) zero or more \fIflags\fP, an optional minimum \fIfield width\fP, an optional \fIprecision\fP and an optional \fIlength modifier\fP.
.PP

The arguments must correspond properly (after type promotion) with the conversion specifier. By default, the arguments are used in the order given, where each '*' and each conversion specifier asks for the next argument (and it is an error if insufficiently many arguments are given). One can also specify explicitly which argument is taken, at each place where an argument is required, by writing "%m$" instead of '%' and "*m$" instead of '*', where the decimal integer \fIm\fP denotes the position in the argument list of the desired argument, indexed starting from 1.  Thus,
.PP
.RS +4
printf("%*d", width, num);
.RE
and
.RS +4
printf("%2$*1$d", width, num);
.PP
.RE
are equivalent. The second style allows repeated references to the same argument. The C99 standard does not include the style using '$', which comes from the Single UNIX Specification. If the style using '$' is used, it must be used through out for all conversions taking an argument and all width and precision arguments, but it may be mixed with "%%" formats which do not consume an argument. There may be no gaps in the numbers of arguments specified using '$'; for example, if arguments 1 and 3 are specified, argument 2 must also be specified somewhere in the format string.
.PP
For some numeric conversions a radix character ("decimal point") or thousands' grouping character is used. The actual character used depends on the \fBLC_NUMERIC\fP part of the locale. The POSIX locale uses '.' as radix character, and does not have a grouping character. Thus,
.PP
.RS +4
printf("%2$*1$d", width, num);
.RE
.PP
results in "1234567.89" in the POSIX locale, in "1234567,89" in the nl_NL locale, and in "1.234.567,89" in the da_DK locale.
.PP
.RS -4
\fBThe flag character\fP
.RE
The character % is followed by zero or more of the following flags:
.PP
#      The value should be converted to an "alternate form".  For o conversions,  the first character of the output string
.RS +7
is made zero (by prefixing a 0 if it was not zero already). For x and X conversions, a nonzero result has the string "0x" (or "0X" for X conversions) prepended to it.  For a, A, e, E, f, F, g, and G conversions, the result will always contain a decimal point, even if no digits follow it (normally, a decimal point appears in the results of those conversions only if a digit follows). For g and G conversions, trailing zeros are not removed from the result as they would otherwise be.  For other conversions, the result is undefined.
.RE
.PP
0      The value should be zero padded.  For d, i, o, u, x, X, a, A, e, E, f, F, g, and G conversions, the converted value .RS +7 is padded on the left with zeros rather than blanks. If the 0 and - flags both appear, the 0 flag is ignored. If a precision is given with a numeric conversion (d, i, o, u, x, and X), the 0 flag is ignored. For other conversions, the behavior is undefined.
.RE
.PP
-      The converted value is to be  left adjusted on the field  boundary. (The default is  right  justification.)  Except .RS +7 for  n  conversions, the converted value is padded on the right with blanks, rather than on the left with blanks or zeros. A - overrides a 0 if both are given.
.RE
.PP
' '    (a space) A blank should be left before a positive number (or empty string) produced by a signed conversion.
.PP
+      A sign (+ or -) should always be placed before a number produced by a signed conversion.  By default a sign is used only for negative numbers.  A + overrides a space if both are used.
.PP
The five flag characters above are defined in the C standard.  The SUSv2 specifies one further flag character.
.PP
'      For decimal conversion (i, d, u, f, F, g, G) the output is to be grouped with thousands' grouping characters if the .RS +7 locale information indicates any. Note that many versions of gcc(1) cannot parse this option and will issue a warning. SUSv2 does not include %'F.
.RE
.PP
glibc 2.2 adds one further flag character.
.PP
I      For decimal integer conversion (i, d, u)  the output uses the locale's  alternative  output  digits,  if any.  For .RS +7 example, since glibc 2.2.3 this will give Arabic-Indic digits in the Persian ("fa_IR") locale.
.RE
.PP
.RS -4
\fBThe field width\fP
.RE
